#!/bin/bash
# Mac Development Environment Setup Script
# Creates a consistent development environment with quality of life improvements

set -e  # Exit on any error

echo "üçé Setting up Mac Development Environment..."

# Get script directory to find dotfiles
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_DIR="$(dirname "$SCRIPT_DIR")/dotfiles"

echo "üîç Looking for dotfiles in: $DOTFILES_DIR"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to verify file exists and is readable
verify_file() {
    if [ -f "$1" ] && [ -r "$1" ]; then
        echo "‚úÖ $1 exists and is readable"
        return 0
    else
        echo "‚ùå $1 is missing or not readable"
        return 1
    fi
}

# Check if running on macOS
if [[ "$OSTYPE" != "darwin"* ]]; then
    echo "‚ö†Ô∏è  This script is designed for macOS. Continue anyway? (y/n)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Install Homebrew if not already installed
if ! command_exists brew; then
    echo "üç∫ Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to PATH for Apple Silicon Macs
    if [[ $(uname -m) == "arm64" ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
else
    echo "‚úÖ Homebrew already installed"
fi

# Update Homebrew
echo "üì¶ Updating Homebrew..."
brew update

# Install essential development tools
echo "üîß Installing essential development tools..."
brew install \
    tmux \
    zsh \
    git \
    curl \
    wget \
    unzip

# Install quality of life CLI tools
echo "‚ú® Installing quality of life CLI tools..."
brew install \
    eza \
    ripgrep \
    fd \
    fzf \
    bat \
    tree \
    htop \
    jq \
    tldr

# Install development languages and tools
echo "üõ†Ô∏è Installing development languages and tools..."

# Check for tfenv conflict before installing terraform
if command_exists tfenv; then
    echo "‚ö†Ô∏è  tfenv detected. Skipping terraform installation (use 'tfenv install latest' instead)"
    brew install \
        node \
        awscli \
        --formula docker \
        git-lfs \
        neovim \
        python3
else
    brew install \
        node \
        terraform \
        awscli \
        --formula docker \
        git-lfs \
        neovim \
        python3
fi

# Install GUI applications via Homebrew Cask
echo "üñ•Ô∏è Installing GUI applications..."
brew install --cask visual-studio-code || echo "‚ö†Ô∏è Visual Studio Code installation had issues, continuing..."

# Install FiraCode Nerd Font
echo "üî§ Installing FiraCode Nerd Font..."
brew tap homebrew/cask-fonts
brew install --cask font-fira-code-nerd-font || echo "‚ö†Ô∏è FiraCode Nerd Font installation had issues, continuing..."

echo "üí° Note: Docker CLI is installed via brew. For Docker Desktop GUI, install manually from:"
echo "   https://www.docker.com/products/docker-desktop"

# Install Xcode Command Line Tools
echo "üõ†Ô∏è Installing Xcode Command Line Tools..."
if ! xcode-select -p &> /dev/null; then
    xcode-select --install
    echo "‚ö†Ô∏è  Xcode Command Line Tools installation started. Please complete the installation in the popup dialog."
    echo "Press any key to continue after installation completes..."
    read -n 1
else
    echo "‚úÖ Xcode Command Line Tools already installed"
fi

# Install full Xcode (optional - requires App Store)
echo "üì± Xcode Installation Note:"
echo "To install full Xcode, please download it from the App Store manually."
echo "This script installs Xcode Command Line Tools only."

# Install Oh My Zsh
echo "üêö Installing Oh My Zsh..."
echo "üîç Checking if Oh My Zsh already exists..."
if [ ! -d "$HOME/.oh-my-zsh" ]; then
    echo "üì• Oh My Zsh not found, installing..."
    echo "üîç About to run: curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
    if sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended; then
        echo "‚úÖ Oh My Zsh installation completed"
        echo "üîç Verifying installation..."
        if [ -d "$HOME/.oh-my-zsh" ]; then
            echo "‚úÖ Oh My Zsh directory exists"
        else
            echo "‚ùå Oh My Zsh directory not found after installation"
        fi
        if [ -f "$HOME/.zshrc" ]; then
            echo "‚úÖ .zshrc file created"
        else
            echo "‚ùå .zshrc file not created"
        fi
    else
        echo "‚ùå Oh My Zsh installation failed with exit code: $?"
    fi
else
    echo "‚úÖ Oh My Zsh already installed"
fi

# Install TPM (Tmux Plugin Manager)
echo "üîå Installing Tmux Plugin Manager..."
if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

# Create tmux directories to prevent resurrection errors
echo "üìÅ Creating tmux directories..."
mkdir -p ~/.tmux/resurrect
echo "‚úÖ tmux directories created"

# Install Rust and Cargo (for some modern tools)
echo "ü¶Ä Installing Rust and Cargo..."
if ! command -v rustc &> /dev/null; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source ~/.cargo/env
fi

# Set up dotfiles
echo "üìù Setting up dotfiles..."

# Function to create dotfile
create_dotfile() {
    local file="$1"
    local source_file="$2"
    
    if [ -f "$source_file" ]; then
        echo "üìÑ Processing $file..."
        if cp "$source_file" "$file"; then
            echo "‚úÖ $file created successfully"
        else
            echo "‚ùå Failed to copy $source_file to $file"
        fi
    else
        echo "‚ö†Ô∏è  $source_file not found, skipping $file"
    fi
}

# Create dotfiles from dotfiles directory
create_dotfile ~/.tmux.conf "$DOTFILES_DIR/.tmux.conf"
create_dotfile ~/.vimrc "$DOTFILES_DIR/.vimrc"
create_dotfile ~/.zshrc.custom "$DOTFILES_DIR/.zshrc.custom"

# Set up Neovim configuration
echo "üìù Setting up Neovim configuration..."
mkdir -p ~/.config/nvim
create_dotfile ~/.config/nvim/init.vim "$DOTFILES_DIR/init.vim"
create_dotfile ~/.config/nvim/coc-settings.json "$DOTFILES_DIR/coc-settings.json"

# Verify dotfiles were created
echo "üîç Verifying dotfiles..."
verify_file ~/.tmux.conf || echo "‚ö†Ô∏è  .tmux.conf not created"
verify_file ~/.vimrc || echo "‚ö†Ô∏è  .vimrc not created" 
verify_file ~/.zshrc.custom || echo "‚ö†Ô∏è  .zshrc.custom not created"

# Add custom zsh config to .zshrc
if [ -f "$HOME/.zshrc.custom" ]; then
    if ! grep -q "source ~/.zshrc.custom" ~/.zshrc 2>/dev/null; then
        echo "üîó Linking custom zsh config to .zshrc..."
        echo "" >> ~/.zshrc
        echo "# Custom configuration" >> ~/.zshrc
        echo "source ~/.zshrc.custom" >> ~/.zshrc
        echo "‚úÖ Custom config linked to .zshrc"
    else
        echo "‚úÖ Custom config already linked in .zshrc"
    fi
fi

# Set zsh as default shell (if not already)
if [[ "$SHELL" != */zsh ]]; then
    echo "üêö Setting zsh as default shell..."
    chsh -s $(which zsh)
    echo "‚úÖ Shell changed to zsh. Please restart your terminal."
else
    echo "‚úÖ zsh is already the default shell"
fi

# Install tmux plugins
echo "üîå Installing tmux plugins..."
if [ -f "$HOME/.tmux.conf" ]; then
    # Start tmux in detached mode and install plugins
    tmux new-session -d -s setup 2>/dev/null || true
    tmux send-keys -t setup "~/.tmux/plugins/tpm/bin/install_plugins" Enter 2>/dev/null || true
    sleep 5
    tmux kill-session -t setup 2>/dev/null || true
fi

# Install fzf key bindings and fuzzy completion
echo "üîç Setting up fzf integration..."
$(brew --prefix)/opt/fzf/install --key-bindings --completion --no-update-rc

# Install Python development packages
echo "üêç Installing Python development packages..."
# Check if Python environment is externally managed
if pip3 install --user --dry-run black 2>&1 | grep -q "externally-managed-environment"; then
    echo "‚ö†Ô∏è Python environment is externally managed. Installing via pipx instead..."
    if ! command_exists pipx; then
        brew install pipx
    fi
    pipx install black
    pipx install flake8
    pipx install pylint
    pipx install isort
    # Install pynvim for Neovim Python support
    pip3 install --user --break-system-packages pynvim || echo "‚ö†Ô∏è pynvim installation failed"
    echo "‚úÖ Python packages installed via pipx"
else
    pip3 install --user black flake8 pylint isort python-lsp-server[all] pynvim || echo "‚ö†Ô∏è Some Python packages failed to install"
fi

# Install VS Code extensions
echo "üß© Installing VS Code extensions..."
if command_exists code; then
    echo "Installing recommended VS Code extensions..."
    code --install-extension ms-vscode-remote.remote-ssh
    code --install-extension ms-vscode.vscode-json
    code --install-extension eamodio.gitlens
    code --install-extension hashicorp.terraform
    code --install-extension ms-python.python
    code --install-extension ms-vscode.js-debug
    code --install-extension bradlc.vscode-tailwindcss
    code --install-extension ms-vscode.vscode-typescript-next
    code --install-extension ms-azuretools.vscode-docker
    code --install-extension github.copilot
    code --install-extension ms-vscode.powershell
    code --install-extension rust-lang.rust-analyzer
    code --install-extension ms-toolsai.jupyter
    code --install-extension ms-vscode-remote.remote-containers
    code --install-extension shd101wyy.markdown-preview-enhanced
    echo "‚úÖ VS Code extensions installed"
else
    echo "‚ö†Ô∏è  VS Code not found in PATH. Extensions will be skipped."
    echo "Please restart your terminal and run: code --install-extension <extension-name>"
fi

echo ""
echo "üéâ Mac development environment setup complete!"
echo ""
echo "üîç Final verification:"

# Verify installations
echo "üì¶ Checking installed packages..."
command_exists tmux && echo "‚úÖ tmux installed" || echo "‚ùå tmux missing"
command_exists zsh && echo "‚úÖ zsh installed" || echo "‚ùå zsh missing"
command_exists git && echo "‚úÖ git installed" || echo "‚ùå git missing"
command_exists eza && echo "‚úÖ eza installed" || echo "‚ùå eza missing"
command_exists bat && echo "‚úÖ bat installed" || echo "‚ùå bat missing"
command_exists rg && echo "‚úÖ ripgrep installed" || echo "‚ùå ripgrep missing"
command_exists fd && echo "‚úÖ fd installed" || echo "‚ùå fd missing"
command_exists fzf && echo "‚úÖ fzf installed" || echo "‚ùå fzf missing"
command_exists aws && echo "‚úÖ aws cli installed" || echo "‚ùå aws cli missing"
if command_exists tfenv; then
    echo "‚úÖ terraform managed by tfenv (use 'tfenv install latest' to install terraform)"
else
    command_exists terraform && echo "‚úÖ terraform installed" || echo "‚ùå terraform missing"
fi
command_exists node && echo "‚úÖ node.js installed" || echo "‚ùå node.js missing"
command_exists nvim && echo "‚úÖ neovim installed" || echo "‚ùå neovim missing"
command_exists python3 && echo "‚úÖ python3 installed" || echo "‚ùå python3 missing"
command_exists code && echo "‚úÖ visual studio code installed" || echo "‚ùå visual studio code missing"

# Check if FiraCode Nerd Font is installed
if ls ~/Library/Fonts/FiraCode* >/dev/null 2>&1 || ls /Library/Fonts/FiraCode* >/dev/null 2>&1 || ls /System/Library/Fonts/FiraCode* >/dev/null 2>&1; then
    echo "‚úÖ FiraCode Nerd Font installed"
else
    echo "‚ùå FiraCode Nerd Font missing"
fi

# Verify dotfiles
echo ""
echo "üìÑ Checking dotfiles..."
verify_file ~/.tmux.conf
verify_file ~/.vimrc
verify_file ~/.zshrc.custom
verify_file ~/.config/nvim/init.vim
verify_file ~/.config/nvim/coc-settings.json

# Check if Oh My Zsh is installed
if [ -d "$HOME/.oh-my-zsh" ]; then
    echo "‚úÖ Oh My Zsh installed"
else
    echo "‚ùå Oh My Zsh missing"
fi

# Check if TPM is installed
if [ -d "$HOME/.tmux/plugins/tpm" ]; then
    echo "‚úÖ Tmux Plugin Manager installed"
else
    echo "‚ùå Tmux Plugin Manager missing"
fi

# Check if custom config is loaded in .zshrc
if grep -q "source ~/.zshrc.custom" ~/.zshrc 2>/dev/null; then
    echo "‚úÖ Custom zsh config is linked"
else
    echo "‚ö†Ô∏è  Custom zsh config not linked in .zshrc"
fi

echo ""
echo "üìã Next steps:"
echo "1. üîÑ Restart your terminal to use zsh as default shell"
echo "2. üîå Open tmux and press Ctrl+a then I to install plugins"
echo "3. üîß Configure Git credentials:"
echo "   git config --global user.name 'Your Name'"
echo "   git config --global user.email 'your.email@example.com'"
echo "4. üß™ Test your setup:"
echo "   ls    # Should show colorful output with icons"
echo "   cat ~/.zshrc  # Should show syntax highlighting"
echo "   tmux  # Should start with mouse support"
echo "   nvim  # Should open Neovim with plugins"
echo "   code  # Should open Visual Studio Code"
echo "5. üì± Install full Xcode from the App Store if needed"
echo ""
echo "üõ†Ô∏è  If any items show ‚ùå, you may need to run parts of the setup manually."
echo "üéØ  For issues, check the GitHub repository README for troubleshooting."
echo ""
echo "Enjoy your Mac development environment! üöÄ"